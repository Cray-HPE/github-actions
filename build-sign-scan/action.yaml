#
# MIT License
#
# (C) Copyright 2021-2024 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
name: Build Scan Push
description: Builds, scans, pushes and signs docker images
inputs:
  docker_repo:
    required: true
    description: "Full image name in form repo_hostname/short_image_name"
  docker_tag:
    required: true
    description: "Image tag"
  docker_push:
    default: "true"
    description: "Whether to push image to registry (docker buildx build --push)"
  docker_registry:
    default: ""
    description: "Docker registry to login to prior to push"
  context_path:
    default: "."
    description: "Context path to include into docker image"
  docker_username:
    default: ""
    description: "Docker registry username"
  docker_password:
    default: ""
    description: "Docker registry password"
  docker_build_args:
    default: ""
    description: "Additional arguments for docker buildx build command"
  docker_build_platforms:
    default: ""
    description: "List of platforms to build for, for example 'linux/arm64,linux/amd64'"
  docker_secrets:
    default: ""
    description: "List of secrets to mount during docker build, in form name=value multi-line text"
  docker_additional_tags:
    default: ""
    description: "Additional tags to assign to image, multi-line text, one tag per line"
  sign:
    default: "true"
    description: "Sign image with Cosign"
  cosign_gcp_workload_identity_provider:
    default: ""
    description: "GCP Workload Identity Provider URL, grab at GCP console 'Edit provider' page"
  cosign_gcp_service_account:
    default: ""
    description: "GCP Service Account to use for signing"
  cosign_key:
    default: ""
    description: "GCP KMS key URL for signing"
  github_sha:
    default: ""
    description: "Annotation to add to image signature under GITHUB_SHA name"
  snyk:
    default: "true"
    description: "Perform image scan with snyk.io"
  snyk_token:
    default: ""
    description: "Auth token for snyk.io"
  snyk_exclude_app_vulns:
    default: "false"
    description: "Exclude app vulnerabilities during snyk scan (--exclude-app-vulns)"
  snyk_severity_threshold:
    default: "high"
    description: "Report Snyk vulnerabilities only above threshold"
  fail_on_snyk_errors:
    default: "false"
    description: "Fail if snyk vulnerabilities found"
  trivy:
    default: "true"
    description: "Perform image scan with Trivy"
  fail_on_trivy_action_vulnerabilities:
    default: "false"
    description: "Fail if Trivy errors found"

runs:
  using: "composite"
  steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Evaluate Variables
      id: strings
      run: |
          echo "now=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT
          DOCKER_REGISTRY="${{ inputs.docker_registry }}"
          if [ -z "${DOCKER_REGISTRY}" ]; then
              DOCKER_REGISTRY=$(echo "${{ inputs.docker_repo }}" | sed -e 's|/.*||')
          fi
          echo "docker_registry=${DOCKER_REGISTRY}" >> $GITHUB_OUTPUT
          if  [ "${{ inputs.sign }}" == "true" ]; then
              if [ -z "${{ inputs.cosign_gcp_workload_identity_provider }}" ]; then
                  echo "::error::Input parameter 'cosign_gcp_workload_identity_provider' must be provided if sign is enabled"
                  exit 1
              fi
              if [ -z "${{ inputs.cosign_gcp_service_account }}" ]; then
                  echo "::error::Input parameter 'cosign_gcp_service_account' must be provided if sign is enabled"
                  exit 1
              fi
              if [ -z "${{ inputs.cosign_key }}" ]; then
                  echo "::error::Input parameter 'cosign_key' must be provided if sign is enabled"
                  exit 1
              fi
          fi
          if  [ "${{ inputs.snyk }}" == "true" ]; then
              if [ -z "${{ inputs.snyk_token }}" ]; then
                  echo "::error::Input parameter 'snyk_token' must be provided if snyk is enabled"
                  exit 1
              fi
          fi
      shell: bash

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      if: ${{ inputs.docker_username && inputs.docker_password }} 
      with:
        registry: ${{ steps.strings.outputs.docker_registry }}
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}

    - name: Install cosign
      uses: sigstore/cosign-installer@main
      if: ${{ inputs.sign == 'true' }}
      with:
        cosign-release: 'v2.2.4'

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      if: ${{ inputs.sign  == 'true' }}
      with:
        workload_identity_provider: ${{ inputs.cosign_gcp_workload_identity_provider }}
        service_account: ${{ inputs.cosign_gcp_service_account }}

    - name: Set up Cloud SDK for Signing
      uses: google-github-actions/setup-gcloud@v2
      if: ${{ inputs.sign  == 'true' }}

    - name: Evaluate Docker Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.docker_repo }}:${{ inputs.docker_tag }}
        tags: |
          type=raw,value=${{ inputs.docker_tag }}
        labels: |
          org.opencontainers.image.vendor=Hewlett Packard Enterprise Development LP
          buildDate=${{ steps.strings.outputs.now }}
          workflowRef=${{ github.workflow_ref }}

    - name: Build Image
      id: build
      uses: docker/build-push-action@v5
      with:
        build-args: ${{ inputs.docker_build_args }}
        secrets: ${{ inputs.docker_secrets }}
        context: ${{ inputs.context_path }}
        push: ${{ inputs.docker_push }}
        load: ${{ (inputs.docker_push != 'true') && 'true' || 'false' }}
        platforms: ${{ inputs.docker_build_platforms }}
        tags: |
          ${{ inputs.docker_repo }}:${{ inputs.docker_tag }}
          ${{ inputs.docker_additional_tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Sign
      if: ${{ inputs.sign == 'true' }}
      run: cosign sign --key ${{ inputs.cosign_key }} --tlog-upload=false
        -a GIT_HASH=${{ inputs.github_sha || github.sha }} ${{ inputs.docker_repo }}@${{ steps.build.outputs.digest }}
      shell: bash

    - name: Snyk Scan
      uses: docker://docker.io/snyk/snyk:docker
      if: ${{ inputs.snyk == 'true' }}
      id: snyk
      env:
        SNYK_TOKEN: ${{ inputs.snyk_token }}
        DOCKER_USERNAME: ${{ inputs.docker_username }}
        DOCKER_PASSWORD: ${{ inputs.docker_password }}
        COMMAND: snyk container test --username="$DOCKER_USERNAME" --password="${DOCKER_PASSWORD}" 
          ${{ inputs.docker_repo }}@${{ steps.build.outputs.digest }}
          ${{ inputs.snyk_exclude_app_vulns == 'true' && '--exclude-app-vulns' || '' }}
          --severity-threshold=${{ inputs.snyk_severity_threshold }}; echo exit_code=$? >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      if: ${{ inputs.trivy == 'true' }}
      id: trivy
      with:
        scan-type: config
        exit-code: ${{ inputs.fail_on_trivy_action_vulnerabilities && '0' || '1' }}
        scan-ref: '${{ inputs.context_path }}'
        severity: 'CRITICAL,HIGH'
        hide-progress: false

    - name: Report Build Result
      run: |
          echo "### Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo '- Built `${{ inputs.docker_repo }}@${{ steps.build.outputs.digest }}`' >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.docker_push }}" == 'true' ]; then
              echo '- Pushed `${{ inputs.docker_repo }}:${{ inputs.docker_tag }}` to `${{ steps.strings.outputs.docker_registry }}`' >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ inputs.sign }}" == 'true' ]; then
              echo '- Signed `${{ inputs.docker_repo }}:${{ inputs.docker_tag }}` with Cosign' >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ inputs.snyk }}" == 'true' ]; then
              echo '- Scanned `${{ inputs.docker_repo }}:${{ inputs.docker_tag }}` with Snyk' >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ inputs.trivy }}" == 'true' ]; then
              echo '- Scanned `${{ inputs.docker_repo }}:${{ inputs.docker_tag }}` with Trivy' >> $GITHUB_STEP_SUMMARY
          fi
      shell: bash

    - name: Report Snyk Scan Result
      if: ${{ inputs.snyk == 'true' && steps.snyk.outputs.exit_code != '0' }}
      run: |
        if [ "${{ steps.snyk.outputs.exit_code }}" == "1" ]; then
            message="Vulnerabilities are reported by snyk scan."
        else
            message="Snyk scan reported error due to misconfiguration or temporary issue."
        fi
        if [ "${{ inputs.fail_on_snyk_errors }}" == "true" ]; then
            echo "::error::${message}"
            exit 1
        else
            echo "::warning::${message}"
        fi
      shell: bash
