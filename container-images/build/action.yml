name: Build and push container images
description: Build and push container images with docker/metadata-action and docker/build-push-action
author: Cray-HPE
branding:
  icon: anchor
  color: blue

inputs:
  images:
    description: List of image repositories to use as base name for generated tags regardless of build stability
    required: false
  stable-images:
    description: List of image repositories to use as base name for generated tags for _stable_ builds
    required: false
  unstable-images:
    description: List of image repositories to use as base name for generated tags for _unstable_ builds
    required: false
  generate-tags:  # Renamed since docker/build-push-action supports tags
    description: List of tags as key-value pair attributes to generate
    required: false
    default: |-
      type=schedule
      type=ref,event=branch
      type=ref,event=pr
      type=semver,pattern={{version}}
      type=semver,pattern={{major}}.{{minor}}
      type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
  flavor:
    description: Flavors to apply
    required: false
  vendor:
    description: Value of `org.opencontainers.image.vendor` label
    required: false
    default: Hewlett Packard Enterprise Development LP
  labels:
    description: List of metadata for an image
    required: false

  # Inputs passed through to docker/build-push-action
  allow:
    description: List of extra privileged entitlement (e.g., network.host,security.insecure)
    required: false
  build-args:
    description: List of build-time variables
    required: false
  builder:
    description: Builder instance
    required: false
  cache-from:
    description: List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
    required: false
  cache-to:
    description: List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
    required: false
  cgroup-parent:
    description: Optional parent cgroup for the container used in the build
    required: false
  context:
    description: Build's context is the set of files located in the specified PATH or URL
    required: false
  file:
    description: Path to the Dockerfile
    required: false
  load:
    description: Load is a shorthand for --output=type=docker
    required: false
    default: 'false'
  network:
    description: Set the networking mode for the RUN instructions during build
    required: false
  no-cache:
    description: Do not use cache when building the image
    required: false
    default: 'false'
  outputs:
    description: List of output destinations (format: type=local,dest=path)
    required: false
  platforms:
    description: List of target platforms for build
    required: false
  pull:
    description: Always attempt to pull a newer version of the image
    required: false
    default: 'false'
  push:
    description: Push is a shorthand for --output=type=registry
    required: false
    default: 'true'
  secrets:
    description: List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
    required: false
  secret-files:
    description: List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
    required: false
  shm-size:
    description: Size of /dev/shm (e.g., 2g)
    required: false
  ssh:
    description: List of SSH agent socket or keys to expose to the build
    required: false
  tags:
    description: List of tags
    required: false
  target:
    description: Sets the target stage to build
    required: false
  ulimit:
    description: Ulimit options (e.g., nofile=1024:1024)
    required: false
  github-token:
    description: GitHub Token used to authenticate against a repository for Git context
    default: ${{ github.token }}
    required: false

outputs:
  stable:
    description: Boolean indicating if build was stable
    value: ${{ steps.check.outputs.stable }}
  images:
    description: List of image repositories used as base name for generated tags
    value: ${{ steps.images.outputs.images }}
  version:
    description: Generated image version
    value: ${{ steps.meta.outputs.version }}
  generated-tags:
    description: List of generated image tags
    value: ${{ steps.meta.outputs.tags }}
  tags:
    description: List of all image tags applied to image
    value: |
      ${{ steps.meta.outputs.tags }}
      ${{ inputs.tags }}
  labels:
    description: List of generated image labels
    value: ${{ steps.meta.outputs.labels }}
  json:
    description: JSON output of generated tags and labels
    value: ${{ steps.meta.outputs.json }}
  digest:
    description: Image content-addressable identifier also called a digest
    value: ${{ steps.build.outputs.digest }}
  metadata:
    description: Build result metadata
    value: ${{ steps.build.outputs.metadata }}
  refs:
    description: Array of image refs pinned to digest
    value: ${{ steps.image-refs.outputs.refs }}

runs:
  using: composite
  steps:
    - name: Check if stable
      id: check
      env:
        REF: ${{ github.ref }}
      shell: bash
      run: |
        if [[ -n "$(perl -ne 'print if /^refs\/tags\/v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/' <<< "$REF")" ]]; then
            echo "::set-output name=stable::true"
        else
            echo "::set-output name=stable::false"
        fi

    - name: Check images specified
      if: ${{ inputs.images == '' && (steps.check.outputs.stable == 'true' && inputs.stable-images == '' || inputs.unstable-images == '') }}
      env:
        STABILITY: ${{ steps.check.outputs.stable == 'true' && 'stable' || 'unstable' }}
      run: echo "::error:: No images specified for ${STABILITY} build"

    - name: Set images
      id: images
      env:
        IMAGES: |
          ${{ inputs.images }}
          ${{ steps.check.outputs.stable == 'true' && inputs.stable-images || inputs.unstable-images }}
      run: echo "::set-output name=images::$(sed -e '/^[[:space:]]*$/d' <<< "$IMAGES")"

    - name: Generate tags and labels
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ steps.images.outputs.images }}
        tags: |
          type=sha,format=long
          ${{ inputs.generate-tags }}
        flavor: ${{ inputs.flavor }}
        labels: |
          ${{ inputs.vendor && format('org.opencontainers.image.vendor={0}, inputs.vendor) }}
          ${{ inputs.labels }}
        github-token: ${{ inputs.github-token }}

    - name: Build and push
      id: build
      uses: docker/build-push-action@v2
      with:
        allow: ${{ inputs.allow }}
        build-args: ${{ inputs.build-args }}
        builder: ${{ inputs.builder }}
        cache-from: ${{ inputs.cache-from }}
        cache-to: ${{ inputs.cache-to }}
        cgroup-parent: ${{ inputs.cgroup-parent }}
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        labels: ${{ steps.meta.outputs.labels }}
        load: ${{ inputs.load }}
        network: ${{ inputs.network }}
        no-cache: ${{ inputs.no-cache }}
        outputs: ${{ inputs.outputs }}
        platforms: ${{ inputs.platforms }}
        pull: ${{ inputs.pull }}
        push: ${{ inputs.push }}
        secrets: ${{ inputs.secrets }}
        secret-files: ${{ inputs.secret-files }}
        shm-size: ${{ inputs.shm-size }}
        ssh: ${{ inputs.ssh }}
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ inputs.tags }}
        target: ${{ inputs.target }}
        ulimit: ${{ inputs.ulimit }}
        github-token: ${{ inputs.github-token }}

    - name: Set image references
      id: image-refs
      shell: bash
      env:
        IMAGES: ${{ steps.images.outputs.images }}
        DIGEST: ${{ steps.build.outputs.digest }}
      run: echo "::set-output name=refs::$(jq -R --arg digest "$DIGEST" '. + "@" + $digest' <<< "$IMAGES" | jq -sc)"

